# Generated by Django 3.0.2 on 2020-01-29 23:10

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import pool.models
from django.core.management import call_command

def load_fixtures(apps, schema_editor):
    call_command('loaddata', 'pool/fixtures/conferences.json', app_label='pool')
    call_command('loaddata', 'pool/fixtures/divisions.json', app_label='pool')
    call_command('loaddata', 'pool/fixtures/countries.json', app_label='pool')
    call_command('loaddata', 'pool/fixtures/stadiumSurfaces.json', app_label='pool')
    call_command('loaddata', 'pool/fixtures/stadiums.json', app_label='pool')
    call_command('loaddata', 'pool/fixtures/cities.json', app_label='pool')
    call_command('loaddata', 'pool/fixtures/teams.json', app_label='pool')
    call_command('loaddata', 'pool/fixtures/weekTypes.json', app_label='pool')
    call_command('loaddata', 'pool/fixtures/pickTypes.json', app_label='pool')
    call_command('loaddata', 'pool/fixtures/gameStatus.json', app_label='pool')
    call_command('loaddata', 'pool/fixtures/alertLevel.json', app_label='pool')
    call_command('loaddata', 'pool/fixtures/pageLayoutTypes.json', app_label='pool')

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Names and numbers only.', max_length=150, unique=True, validators=[pool.models.MyValidator()], verbose_name='username')),
                ('mobile', models.CharField(blank=True, max_length=20, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='profile_image')),
                ('timezone', models.CharField(choices=[('US/Alaska', 'US/Alaska'), ('US/Arizona', 'US/Arizona'), ('US/Central', 'US/Central'), ('US/Eastern', 'US/Eastern'), ('US/Hawaii', 'US/Hawaii'), ('US/Mountain', 'US/Mountain'), ('US/Pacific', 'US/Pacific'), ('Europe/Amsterdam', 'Europe/Amsterdam'), ('Europe/Athens', 'Europe/Athens'), ('Europe/Belgrade', 'Europe/Belgrade'), ('Europe/Berlin', 'Europe/Berlin'), ('Europe/Brussels', 'Europe/Brussels'), ('Europe/Bucharest', 'Europe/Bucharest'), ('Europe/Budapest', 'Europe/Budapest'), ('Europe/Copenhagen', 'Europe/Copenhagen'), ('Europe/Dublin', 'Europe/Dublin'), ('Europe/Gibraltar', 'Europe/Gibraltar'), ('Europe/Helsinki', 'Europe/Helsinki'), ('Europe/Istanbul', 'Europe/Istanbul'), ('Europe/Kiev', 'Europe/Kiev'), ('Europe/Lisbon', 'Europe/Lisbon'), ('Europe/London', 'Europe/London'), ('Europe/Luxembourg', 'Europe/Luxembourg'), ('Europe/Madrid', 'Europe/Madrid'), ('Europe/Malta', 'Europe/Malta'), ('Europe/Moscow', 'Europe/Moscow'), ('Europe/Oslo', 'Europe/Oslo'), ('Europe/Paris', 'Europe/Paris'), ('Europe/Prague', 'Europe/Prague'), ('Europe/Rome', 'Europe/Rome'), ('Europe/Sarajevo', 'Europe/Sarajevo'), ('Europe/Stockholm', 'Europe/Stockholm'), ('Europe/Vienna', 'Europe/Vienna'), ('Europe/Volgograd', 'Europe/Volgograd'), ('Europe/Warsaw', 'Europe/Warsaw'), ('Europe/Zurich', 'Europe/Zurich')], default='US/Eastern', max_length=50)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AlertLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name_plural': 'cities',
            },
        ),
        migrations.CreateModel(
            name='Conference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('short_name', models.CharField(max_length=3, verbose_name='Abbr')),
            ],
            options={
                'verbose_name_plural': 'countries',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=5)),
                ('conference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pool.Conference')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), (6, '6'), (7, '7'), (8, '8'), (9, '9'), (10, '10'), (11, '11'), (12, '12'), (13, '13'), (14, '14'), (15, '15'), (16, '16')], default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(16)], verbose_name='Game No.')),
                ('start_time', models.DateTimeField()),
                ('home_score', models.PositiveSmallIntegerField(default=0)),
                ('visitor_score', models.PositiveSmallIntegerField(default=0)),
                ('is_regulation_tie', models.BooleanField(default=False)),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pool.City')),
            ],
        ),
        migrations.CreateModel(
            name='GameStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=15)),
            ],
        ),
        migrations.CreateModel(
            name='NewsItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30, null=True)),
                ('message', models.TextField(max_length=250)),
                ('effective_date', models.DateTimeField(null=True)),
                ('effective_end_date', models.DateTimeField(null=True)),
            ],
            options={
                'verbose_name_plural': 'News',
            },
        ),
        migrations.CreateModel(
            name='PageLayoutType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Grid', 'Grid'), ('List', 'List'), ('Compact', 'Compact')], default='List', max_length=12)),
            ],
        ),
        migrations.CreateModel(
            name='PickType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('value', models.PositiveSmallIntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('message', models.TextField(max_length=250)),
                ('points', models.SmallIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('effective_date', models.DateField()),
                ('effective_end_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='StadiumSurface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Week',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('effective_date', models.DateField()),
                ('effective_end_date', models.DateField()),
                ('is_active', models.BooleanField(default=False)),
                ('season', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pool.Season')),
            ],
        ),
        migrations.CreateModel(
            name='WeekType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Winner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(blank=True, max_length=250, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('week', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pool.Week')),
            ],
        ),
        migrations.AddField(
            model_name='week',
            name='week_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pool.WeekType'),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('abbreviation', models.CharField(max_length=10)),
                ('nick_name', models.CharField(max_length=30)),
                ('short_nick_name', models.CharField(max_length=10)),
                ('image_name', models.CharField(default='NFL.gif', max_length=50)),
                ('small_image_name', models.CharField(default='NFL.gif', max_length=50)),
                ('color_01', models.CharField(blank=True, max_length=7, null=True)),
                ('color_02', models.CharField(blank=True, max_length=7, null=True)),
                ('color_03', models.CharField(blank=True, max_length=7, null=True)),
                ('color_04', models.CharField(blank=True, max_length=7, null=True)),
                ('city', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pool.City')),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pool.Division')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Talk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(max_length=250)),
                ('effective_date', models.DateTimeField(null=True)),
                ('effective_end_date', models.DateTimeField(null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Stadium',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('capacity', models.PositiveIntegerField()),
                ('year_opened', models.PositiveIntegerField()),
                ('is_active', models.BooleanField(default=True)),
                ('surface', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pool.StadiumSurface')),
            ],
        ),
        migrations.CreateModel(
            name='Preferences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('picks_page_layout_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pool.PageLayoutType')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Preferences',
                'verbose_name_plural': 'Preferences',
            },
        ),
        migrations.CreateModel(
            name='Pick',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveSmallIntegerField(default=0)),
                ('last_saved_date', models.DateTimeField(auto_now=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pool.Game')),
                ('pick_type', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='pool.PickType')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PayerAudit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('has_paid', models.BooleanField(default=False)),
                ('payment_method', models.CharField(choices=[('ETT', 'e-Transfer Text'), ('ETE', 'e-Transfer Email'), ('POST', 'Canada Post'), ('CIP', 'Cash in Person'), ('PP', 'PayPal'), ('OTHER', 'Other')], max_length=20)),
                ('date_sent', models.DateField(null=True)),
                ('date_received', models.DateField(null=True)),
                ('message', models.TextField(blank=True, max_length=250, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='game',
            name='game_status',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='pool.GameStatus'),
        ),
        migrations.AddField(
            model_name='game',
            name='home_team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='home_team', to='pool.Team'),
        ),
        migrations.AddField(
            model_name='game',
            name='visiting_team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='visiting_team', to='pool.Team'),
        ),
        migrations.AddField(
            model_name='game',
            name='week',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pool.Week'),
        ),
        migrations.CreateModel(
            name='Fee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, default=50.0, max_digits=5, verbose_name='Amount CAD')),
                ('local_amount', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Amount in that Country')),
                ('exchange_source', models.CharField(max_length=50)),
                ('exchange_rate_date', models.DateField(null=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pool.Country')),
            ],
        ),
        migrations.AddField(
            model_name='city',
            name='country',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pool.Country'),
        ),
        migrations.AddField(
            model_name='city',
            name='stadium',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='pool.Stadium'),
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField(max_length=250)),
                ('effective_date', models.DateTimeField(null=True)),
                ('effective_end_date', models.DateTimeField(null=True)),
                ('alert_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pool.AlertLevel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='customuser',
            name='favorite_team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pool.Team'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterOrderWithRespectTo(
            name='city',
            order_with_respect_to='country',
        ),
        migrations.RunPython(load_fixtures),
    ]
